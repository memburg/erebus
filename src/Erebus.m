classdef Erebus
    properties (Constant, Access = private)
        OUTPUT_PATH = "./outputs/";
        FILE_PREFIX = datestr(now, 'yymmddHHMMSS');
    end

    methods (Static, Access = private)
        function createKey(x, y, iterations)
            % Create a Mx3 matrix, full of zeros.
            key = zeros(iterations, 2);

            % Assign random numbers between 0 and 1,
            % in which 0 represents a row, and 1
            % represents a column.
            key(:, 1) = randi([0 1], iterations, 1);

            % In case the line type is 0, it will
            % be considered as a row, in case it 
            % is 1, it'll be considered a column;
            % also explained in previous comment
            % block.
            for i = 1:iterations
                switch key(i, 1)
                    case 0
                        randRow = randi([1 x], iterations, 1);
                        key(i, 2) = randRow(1, 1);
                    case 1
                        randColumn = randi([1 y], iterations, 1);
                        key(i, 2) = randColumn(1, 1);
                    otherwise
                        error("Unexpeceted error while creating encryption key");
                end
            end

            writematrix(key, Erebus.OUTPUT_PATH + "K" + Erebus.FILE_PREFIX + ".csv");
        end

        function encryptedImage = encrypt(rawImage)
            % This is the encryption key that
            % was previously generated by the
            % createKey method.
            encryptionKey = readmatrix(Erebus.OUTPUT_PATH + "K" + Erebus.FILE_PREFIX + ".csv");
            encryptedImage = rawImage;

            for i = 1:size(encryptionKey, 1)
                switch encryptionKey(i, 1)
                    case 0
                        % fprintf("Flipping row %d\n", encryptionKey(i, 2));
                        flipped = flip(encryptedImage(encryptionKey(i, 2), :, :));
                        encryptedImage(encryptionKey(i, 2), :, :) = flipped;
                    case 1
                        % fprintf("Flipping column %d\n", encryptionKey(i, 2));
                        flipped = flip(encryptedImage(:, encryptionKey(i, 2), :));
                        encryptedImage(:, encryptionKey(i, 2), :) = flipped;
                    otherwise
                        error("Unexpeceted error while encrypting the image");
                end
            end
        end

        function decryptedImage = decrypt(encryptedImage, encryptionKey)
            decryptedImage = encryptedImage;

            for i = size(encryptionKey, 1):-1:1
                switch encryptionKey(i, 1)
                    case 0
                        %fprintf("Flipping row %d\n", encryptionKey(i, 2));
                        flipped = flip(decryptedImage(encryptionKey(i, 2), :, :));
                        decryptedImage(encryptionKey(i, 2), :, :) = flipped;
                    case 1
                        %fprintf("Flipping column %d\n", encryptionKey(i, 2));
                        flipped = flip(decryptedImage(:, encryptionKey(i, 2), :));
                        decryptedImage(:, encryptionKey(i, 2), :) = flipped;
                    otherwise
                        error("Unexpeceted error while decrypting the image");
                end
            end
        end
    end

    methods (Static)
        function protect(I, iterations)
            % Get image size, it will be returned
            % in a 1x3 matrix.
            imageSize = size(I);

            disp("Generating encryption key...");

            tic;
            Erebus.createKey(imageSize(1), imageSize(2), iterations);
            toc;

            disp("Encrypting image...");

            tic;
            encryptedImage = Erebus.encrypt(I);
            toc;

            imwrite(encryptedImage, Erebus.OUTPUT_PATH + "E" + Erebus.FILE_PREFIX + ".png");
        end

        function unprotect(I, k)
            disp("Decrypting image...");

            tic;
            decryptedImage = Erebus.decrypt(I, k);
            toc;

            imwrite(decryptedImage, Erebus.OUTPUT_PATH + "D" + Erebus.FILE_PREFIX + ".png");
        end
    end
end
